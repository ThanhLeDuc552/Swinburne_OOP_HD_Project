================================================================================
                    FIREBOY AND WATERGIRL - PHYSICS SYSTEM DOCUMENTATION
================================================================================

TABLE OF CONTENTS:
1. Overview
2. Physics Constants
3. Core Physics Methods
4. Collision Detection System
5. Movement and Input Handling
6. Gravity System
7. Jump Mechanics
8. Collision Prevention System
9. Performance Considerations
10. Usage Examples
11. Troubleshooting Guide

================================================================================
1. OVERVIEW
================================================================================

The physics system in FireBoy and WaterGirl is designed to provide realistic yet 
controllable character movement with precise collision detection. The system 
emphasizes slow, deliberate movement for puzzle-solving gameplay.

Key Features:
- Ultra-slow movement for precise control (0.1 pixels/frame)
- Floaty gravity system for extended air time
- Predictive collision prevention (no phasing through tiles)
- Separated horizontal and vertical movement processing
- Proper grounded state management for jumping

Architecture:
- Static Physics class for all physics calculations
- GameConstants struct for configurable physics parameters
- Predictive collision system preventing tunneling
- Integration with SplashKit for graphics and collision detection

================================================================================
2. PHYSICS CONSTANTS
================================================================================

All physics behavior is controlled by constants in GameConstants.cs:

MOVEMENT CONSTANTS:
- MOVE_SPEED = 0.2f
  * Horizontal movement speed in pixels per frame
  * Extremely slow for precise platforming control
  * Recommended range: 0.05f - 0.5f

GRAVITY CONSTANTS:
- GRAVITY_STRENGTH = 0.001f
  * Downward acceleration in pixels per frame²
  * Ultra-low for floaty, moon-like physics
  * Recommended range: 0.001f - 0.01f

JUMP CONSTANTS:
- JUMP_FORCE = -0.31f
  * Initial upward velocity when jumping (negative = up)
  * Calibrated to reach exactly 3 tiles high
  * Formula: height = (JUMP_FORCE)² / (2 × GRAVITY_STRENGTH)
  * Current: (0.31)² / (2 × 0.001) = 48 pixels = 3 tiles

FRICTION CONSTANTS:
- FRICTION = 0.85f
  * Horizontal velocity decay when not moving (0-1 scale)
  * Higher values = less friction, slower stopping
  * 0.85f provides smooth deceleration

TERMINAL VELOCITY:
- TERMINAL_VELOCITY = 15.0f
  * Maximum falling speed to prevent infinite acceleration
  * Prevents characters from falling too fast

WORLD CONSTANTS:
- TILE_SIZE = 16.0
  * Size of each tile in pixels
  * Used for collision detection grid calculations

SPRITE CONSTANTS:
- SPRITE_SCALE = 0.1f
  * Global scaling factor for all character sprites
  * Affects collision box calculations

================================================================================
3. CORE PHYSICS METHODS
================================================================================

3.1 ApplyGravity(Character character)
-------------------------------------
Purpose: Applies downward acceleration when character is airborne

Algorithm:
1. Check if character is not grounded
2. Add GRAVITY_STRENGTH to vertical velocity
3. Cap velocity at TERMINAL_VELOCITY to prevent infinite acceleration

Key Points:
- Only applies when IsGrounded = false
- Continuous acceleration creates realistic falling motion
- Terminal velocity prevents unrealistic speeds

3.2 Jump(Character character, bool jumpPressed)
-----------------------------------------------
Purpose: Initiates jump when conditions are met

Conditions for jumping:
- Character must be grounded (IsGrounded = true)
- Character must be able to jump (CanJump = true)
- Jump input must be pressed (jumpPressed = true)

Jump Process:
1. Set vertical velocity to JUMP_FORCE (negative for upward)
2. Set CanJump = false (prevents double jumping)
3. Set IsGrounded = false (character becomes airborne)

3.3 UpdateCharacter(Character character, Level level)
----------------------------------------------------
Purpose: Main physics update loop called every frame

Update Sequence:
1. Process horizontal input (left/right movement)
2. Apply friction when not moving
3. Handle jump input (before resetting grounded state)
4. Reset grounded state for gravity calculations
5. Apply gravity
6. Move horizontally with collision checking
7. Move vertically with collision checking

This sequence ensures proper physics behavior and collision detection.

================================================================================
4. COLLISION DETECTION SYSTEM
================================================================================

4.1 System Architecture
-----------------------
The collision system uses a two-phase approach:
- Predictive collision prevention
- Precise position adjustment

4.2 HandlePlatformCollision(Character character, Level level)
------------------------------------------------------------
Purpose: Detects collisions between character and solid tiles

Process:
1. Calculate character's bounding box (AABB)
2. Determine which tiles the character overlaps
3. Check each tile for collision
4. Update character AABB after each collision resolution
5. Use HandleTileCollision for precise positioning

Tile Detection:
- Converts character position to tile coordinates
- Checks tiles with GID 1-7 (solid tiles)
- Includes boundary checking to prevent array errors

4.3 HandleTileCollision(Character character, Rectangle tileBounds)
-----------------------------------------------------------------
Purpose: Resolves individual tile collisions using minimum overlap algorithm

Algorithm:
1. Calculate overlap on all four sides:
   - overlapLeft: How far character's right edge penetrates tile's left
   - overlapRight: How far tile's right edge penetrates character's left
   - overlapTop: How far character's bottom edge penetrates tile's top
   - overlapBottom: How far tile's bottom edge penetrates character's top

2. Find minimum overlap to determine collision direction

3. Resolve collision based on minimum overlap:
   - Top collision (landing): Set position, stop Y velocity, set grounded
   - Bottom collision (hitting ceiling): Set position, stop Y velocity
   - Left collision (hitting right wall): Set position, stop X velocity
   - Right collision (hitting left wall): Set position, stop X velocity

This algorithm ensures characters are pushed out of tiles in the most 
appropriate direction based on the collision geometry.

4.4 Predictive Collision Prevention
-----------------------------------
To prevent "phasing" through tiles, the system uses predictive movement:

MoveWithCollisionCheck(Character character, Level level, double deltaX, double deltaY):
1. Move character to target position
2. Check if target position causes collision
3. If collision detected, find maximum safe distance
4. Move character only to safe position
5. Stop velocity in collision direction

FindMaxSafeDistance():
- Uses small incremental steps (0.1 pixels) along movement path
- Tests each position until collision detected
- Returns percentage of safe movement (0.0 to 1.0)

This prevents tunneling through thin walls at any movement speed.

================================================================================
5. MOVEMENT AND INPUT HANDLING
================================================================================

5.1 Input Processing
--------------------
Movement input is processed at the start of each physics update:

Left Movement:
- Set horizontal velocity to -MOVE_SPEED
- Continues until input released

Right Movement:
- Set horizontal velocity to +MOVE_SPEED
- Continues until input released

No Input:
- Apply friction to horizontal velocity
- Stop completely when velocity < 0.1 pixels

5.2 Friction System
-------------------
When no movement input is detected:
1. Multiply horizontal velocity by FRICTION (0.85f)
2. Check if velocity is very small (< 0.1f)
3. If small, set velocity to exactly 0

This provides smooth deceleration rather than instant stopping.

5.3 Movement Phases
-------------------
Movement is processed in two separate phases to prevent collision conflicts:

Phase 1 - Horizontal Movement:
- Apply horizontal velocity
- Check and resolve horizontal collisions only

Phase 2 - Vertical Movement:
- Apply vertical velocity (gravity + jump)
- Check and resolve vertical collisions only

This separation prevents movement conflicts when character hits corners or 
edges of platforms.

================================================================================
6. GRAVITY SYSTEM
================================================================================

6.1 Gravity Application
-----------------------
Gravity is applied continuously when character is airborne:

Every Frame:
1. Check if character is not grounded
2. Add GRAVITY_STRENGTH to vertical velocity
3. Cap at TERMINAL_VELOCITY if needed

6.2 Grounded State Management
-----------------------------
Critical for proper physics behavior:

Frame Start:
- Store previous grounded state
- Reset IsGrounded to false (assume falling)

During Collision:
- Set IsGrounded = true when landing on platform
- Set CanJump = true to enable jumping

This ensures gravity applies when characters walk off platforms while 
maintaining the ability to jump when on solid ground.

6.3 Terminal Velocity
---------------------
Prevents unrealistic falling speeds:
- Maximum falling speed = TERMINAL_VELOCITY (15.0f pixels/frame)
- Applied after gravity acceleration
- Ensures consistent maximum fall speed regardless of fall distance

================================================================================
7. JUMP MECHANICS
================================================================================

7.1 Jump Physics
----------------
Jump height calculation:
h = v² / (2g)
Where:
- h = jump height
- v = initial jump velocity (JUMP_FORCE)
- g = gravity acceleration (GRAVITY_STRENGTH)

Current settings:
- JUMP_FORCE = -0.31f
- GRAVITY_STRENGTH = 0.001f
- Height = (0.31)² / (2 × 0.001) = 48 pixels = 3 tiles

7.2 Jump States
---------------
CanJump Flag:
- Set to true when character lands on ground
- Set to false when jump is initiated
- Prevents double jumping or air jumping

IsGrounded Flag:
- Set to false when jump starts
- Set to true when character lands
- Controls gravity application

7.3 Jump Timing
---------------
With current physics constants:
- Time to reach peak: ~310 frames (at 60 FPS = ~5.2 seconds)
- Total jump time: ~620 frames (~10.4 seconds)
- Very slow, deliberate jumping for puzzle gameplay

================================================================================
8. COLLISION PREVENTION SYSTEM
================================================================================

8.1 Problem Solved
------------------
Traditional collision systems can suffer from "tunneling" where fast-moving 
objects pass through thin barriers between frames. This system prevents that.

8.2 Prevention Method
--------------------
1. Predictive Testing:
   - Move character to target position
   - Test if position would cause collision
   - If collision detected, find safe position

2. Incremental Movement:
   - Break movement into small steps (0.1 pixels)
   - Test each step for collision
   - Stop at first collision point

3. Safe Positioning:
   - Calculate maximum safe movement percentage
   - Move character to safe position only
   - Stop velocity in collision direction

8.3 Performance Optimization
-----------------------------
- Only use predictive system when collision detected
- Small step size (0.1) provides precision without excessive computation
- Early termination when collision found

================================================================================
9. PERFORMANCE CONSIDERATIONS
================================================================================

9.1 Collision Detection Optimization
------------------------------------
- Only check tiles within character's bounding box
- Use tile-based spatial partitioning
- Boundary checking prevents array access errors
- Update AABB only after position changes

9.2 Physics Calculation Efficiency
----------------------------------
- Use simple mathematical operations
- Avoid expensive trigonometric functions
- Leverage SplashKit's optimized rectangle operations
- Minimal object allocation per frame

9.3 Memory Management
---------------------
- Static Physics class avoids object creation
- Reuse Vector2D and Rectangle structures
- Efficient tile array access with bounds checking

================================================================================
10. USAGE EXAMPLES
================================================================================

10.1 Basic Character Update
---------------------------
```csharp
// In main game loop
foreach (Character character in characters)
{
    character.Update(level); // Calls Physics.UpdateCharacter internally
}
```

10.2 Custom Physics Parameters
------------------------------
```csharp
// Modify GameConstants.cs for different feel:
public const float MOVE_SPEED = 0.2f;        // Faster movement
public const float GRAVITY_STRENGTH = 0.002f; // Stronger gravity
public const float JUMP_FORCE = -0.4f;       // Higher jumps
```

10.3 Character-Specific Physics
-------------------------------
```csharp
// In Character subclass, override input methods:
public override bool IsMovingLeft() => SplashKit.KeyDown(KeyCode.AKey);
public override bool IsMovingRight() => SplashKit.KeyDown(KeyCode.DKey);
public override bool IsJumping() => SplashKit.KeyTyped(KeyCode.WKey);
```

================================================================================
11. TROUBLESHOOTING GUIDE
================================================================================

11.1 Character Not Moving
-------------------------
Symptoms: Character appears frozen, no response to input
Causes:
- MOVE_SPEED too small (< 0.01f)
- Input methods returning false
- Character position locked by collision

Solutions:
- Increase MOVE_SPEED in GameConstants
- Check input method implementations
- Verify collision boundaries

11.2 Character Falling Through Platforms
-----------------------------------------
Symptoms: Character passes through solid tiles
Causes:
- Movement speed too high for collision detection
- Incorrect tile GID range in collision check
- Predictive collision system disabled

Solutions:
- Reduce MOVE_SPEED or GRAVITY_STRENGTH
- Verify tiles have GID 1-7
- Check MoveWithCollisionCheck is being called

11.3 Character Can't Jump
-------------------------
Symptoms: Jump input ignored, character stays grounded
Causes:
- IsGrounded never set to true
- CanJump flag stuck at false
- JUMP_FORCE too small

Solutions:
- Check collision detection sets IsGrounded = true
- Ensure CanJump reset when landing
- Increase JUMP_FORCE magnitude

11.4 Jerky or Stuttering Movement
---------------------------------
Symptoms: Character movement appears choppy
Causes:
- Conflicting collision resolutions
- FRICTION too low
- Frame rate issues

Solutions:
- Check collision system for conflicts
- Adjust FRICTION value (0.8-0.9 range)
- Optimize rendering performance

11.5 Character Stuck in Walls
-----------------------------
Symptoms: Character embedded in solid tiles
Causes:
- Collision resolution pushing wrong direction
- Multiple collision conflicts
- Incorrect bounding box calculations

Solutions:
- Check HandleTileCollision minimum overlap logic
- Verify character AABB calculations
- Test with simpler level geometry

================================================================================
TECHNICAL SPECIFICATIONS
================================================================================

Framework: SplashKit SDK
Language: C# (.NET)
Physics Update Rate: 60 FPS (frame-dependent)
Coordinate System: Top-left origin, Y increases downward
Units: Pixels
Precision: Double-precision floating point

Key Dependencies:
- SplashKit.RectanglesIntersect() for collision detection
- SplashKit.VectorTo() for position calculations
- Character.GetAABB() for bounding box
- Level.MapData[] for tile information

================================================================================
VERSION HISTORY
================================================================================

v1.0 - Initial implementation with basic gravity and collision
v1.1 - Added predictive collision prevention
v1.2 - Implemented separated horizontal/vertical movement
v1.3 - Optimized collision detection with AABB updates
v1.4 - Final tuning of physics constants for gameplay balance

================================================================================
END OF DOCUMENTATION
================================================================================ 